source("support.R", echo = FALSE)
source("naiveBayes.R", echo = FALSE)
wd
oldwd <- getwd()
oldwd
setwd("..")
getwd()
list.files()
list.files()
setwd("Desktop/СМПР/Мое/SMCS/")
list.files()
setwd("general/sourses/")
list.files()
setwd("..")
setwd("..")
list.files()
source("main.R")
runApp("Shiny/shinyLinear/")
install.packages("ROCR")
library("ROCR")
cls = c('P', 'P', 'N', 'P', 'P', 'P', 'N', 'N', 'P', 'N', 'P',
'N', 'P', 'N', 'N', 'N', 'P', 'N', 'P', 'N')
score = c(0.9, 0.8, 0.7, 0.6, 0.55, 0.51, 0.49, 0.43,
0.42, 0.39, 0.33, 0.31, 0.23, 0.22, 0.19,
0.15, 0.12, 0.11, 0.04, 0.01)
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2, colorize=TRUE)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc = performance(pred, "auc")
auc = unlist(auc@y.values)
auc
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
plot(roc, lwd=2)
auc = performance(pred, "auc")
auc = unlist(auc@y.values)
text(0.6,0.2,paste("AUC=", round(auc,4), sep=""), cex=1.4)
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc = performance(pred, "auc")
auc = unlist(auc@y.values)
text(0.6,0.2,paste("AUC=", round(auc,4), sep=""), cex=1.4)
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc = performance(pred, "auc")
auc = unlist(auc@y.values)
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc = performance(pred, "auc")
auc = unlist(auc@y.values)
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
# auc = performance(pred, "auc")
# auc = unlist(auc@y.values)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
# auc = performance(pred, "auc")
# auc = unlist(auc@y.values)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
auc = performance(pred, "auc")
auc
pred = prediction(score, cls)
roc = performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
pred <- prediction(score, cls)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
cls <- c('P', 'P', 'N', 'P', 'P', 'P', 'N', 'N', 'P', 'N', 'P',
'N', 'P', 'N', 'N', 'N', 'P', 'N', 'P', 'N')
score <- c(0.9, 0.8, 0.7, 0.6, 0.55, 0.51, 0.49, 0.43,
0.42, 0.39, 0.33, 0.31, 0.23, 0.22, 0.19,
0.15, 0.12, 0.11, 0.04, 0.01)
pred <- prediction(score, cls)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
getwd()
data <- read.csv("data/train.csv")
str(quality)
str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
test$Survived
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
table(data$Survived,predictTrain > 0.5)
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
table(data$Survived,predictTrain > 0.5)
t[2,2]
t <- table(data$Survived,predictTrain > 0.5)
t[2,2]
t[2,1]
sensitivity <- t[2,2] / (t[2,1] + t[2,2])
specificity <- t[1,1] / (t[1,2] + t[1,1])
sensitivity
specificity
install.packages("ROCR")
installed.packages("ROCR")
is.package_version("ROCR")
require("ROCR")
tmp <- require("ROCR")
tmp
tmp <- require("ROCgdfgdfg")
tmp
library("ROCR")
install.packages("ROCR")
predictTrain
predictTrain[2]
data$Survived
data <- read.csv("data/train.csv")
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > 0.5)
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > 0.5)
sensitivity <- t[2,2] / (t[2,1] + t[2,2])
specificity <- t[1,1] / (t[1,2] + t[1,1])
require("ROCR")
# install.packages("ROCR")
library("ROCR")
pred <- prediction(predictTrain, data$Survived)
perf <- performance(pred, "tpr", "fpr")
plot(perf, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > 0.5)
sensitivity <- t[2,2] / (t[2,1] + t[2,2])
specificity <- t[1,1] / (t[1,2] + t[1,1])
require("ROCR")
# install.packages("ROCR")
library("ROCR")
pred <- prediction(predictTrain, data$Survived)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > 0.5)
sensitivity <- t[2,2] / (t[2,1] + t[2,2])
specificity <- t[1,1] / (t[1,2] + t[1,1])
# require("ROCR")
# install.packages("ROCR")
# library("ROCR")
pred <- prediction(predictTrain, data$Survived)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
predictTrain
model
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = gaussian)
#summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > 0.5)
sensitivity <- t[2,2] / (t[2,1] + t[2,2])
specificity <- t[1,1] / (t[1,2] + t[1,1])
# require("ROCR")
# install.packages("ROCR")
# library("ROCR")
pred <- prediction(predictTrain, data$Survived)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = poisson)
#summary(model)
test <- read.csv("data/test.csv")
predictResault <- predict(model, newdata = test, type="response")
test$Survived[predictResault >= 0.5] = 1
test$Survived[predictResault < 0.5] = 0
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > 0.5)
sensitivity <- t[2,2] / (t[2,1] + t[2,2])
specificity <- t[1,1] / (t[1,2] + t[1,1])
# require("ROCR")
# install.packages("ROCR")
# library("ROCR")
pred <- prediction(predictTrain, data$Survived)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1)
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
t <- table(data$Survived,predictTrain > t)
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > t)
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
predictTrain <- predict(model, type="response")
t <- table(data$Survived,predictTrain > t)
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
t <- 0.5
# test <- read.csv("data/test.csv")
# predictResault <- predict(model, newdata = test, type="response")
# test$Survived[predictResault >= t] = 1
# test$Survived[predictResault < t] = 0
predictTrain <- predict(model, type="response")
s <- table(data$Survived,predictTrain > t)
sensitivity <- s[2,2] / (s[2,1] + s[2,2])
specificity <- s[1,1] / (s[1,2] + s[1,1])
s
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
t <- 0.5
# test <- read.csv("data/test.csv")
# predictResault <- predict(model, newdata = test, type="response")
# test$Survived[predictResault >= t] = 1
# test$Survived[predictResault < t] = 0
predictTrain <- predict(model, type="response")
s <- table(data$Survived,predictTrain > t)
sensitivity <- s[2,2] / (s[2,1] + s[2,2])
specificity <- s[1,1] / (s[1,2] + s[1,1])
# require("ROCR")
# install.packages("ROCR")
# library("ROCR")
pred <- prediction(predictTrain, data$Survived)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1, lty="dashed")
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
addmargins(s)
addmargins(s(rwe,rewr))
addmargins(s)
colnames(s) <- c("rew","fsdf")
rownames(s) <- c("534","534")
s
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
TPR <- s[2,2] / (s[2,2] + s[2,1]) #sensitivity
FPR <- s[1,2] / (s[1,2] + s[1,1])
TPR
FPR
TNR <- s[1,1] / (s[1,1] + s[1,2]) #specificity
FNR <- s[2,1] / (s[2,1] + s[2,2])
FNR
TNR
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
FP
data <- read.csv("data/train.csv")
#str(data)
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial)
#summary(model)
t <- 0.5
# test <- read.csv("data/test.csv")
# predictResault <- predict(model, newdata = test, type="response")
# test$Survived[predictResault >= t] = 1
# test$Survived[predictResault < t] = 0
predictTrain <- predict(model, type="response")
s <- table(data$Survived,predictTrain > t)
TP <- s[2,2]
TN <- s[1,1]
FP <- s[1,2]
FN <- s[2,1]
TPR <- TP / (TP + FN) #sensitivity
FPR <- FP / (FP + TN)
TNR <- TN / (TN + FP) #specificity
FNR <- FN / (FN + TP)
# require("ROCR")
# install.packages("ROCR")
# library("ROCR")
pred <- prediction(predictTrain, data$Survived)
roc <- performance(pred, "tpr", "fpr")
plot(roc, lwd=2)
lines(x=c(0, 1), y=c(0, 1), col="black", lwd=1, lty="dashed")
auc <- slot(performance(pred, "auc"), "y.values")[[1]]
text(0.6,0.2,paste("AUC = ", round(auc,4), sep=""), cex=1.4)
title("ROC Curve")
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
plot(roc, lwd=2, colorize=TRUE)
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
check "ROCR"
check("ROCR")
library(devtools)
check("ROCR")
check "ROCR"
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
pred
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
install.packages("PRROC")
require("PRROC")
pred
predictTrain
data$Survived
predictTrain
data$Survived
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
roc <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
roc
roc[1]
roc[2]
roc$auc
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
pred
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
getwd()
getwd(".")
setwd(setwd("."))
getwd()
setwd(oldwd)
getwd()
get_script_path <- function() {
cmdArgs = commandArgs(trailingOnly = FALSE)
needle = "--file="
match = grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
ls_vars = ls(sys.frames()[[1]])
if ("fileName" %in% ls_vars) {
# Source'd via RStudio
return(normalizePath(sys.frames()[[1]]$fileName))
} else {
# Source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
}
cp <- get_script_path()
cp
cp <- get_script_path()
cp <- get_script_path()
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
par(mfcol=c(2,1))
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
#  Read data in dataframe
data <- read.csv("data/train.csv")
# Consider a data structure...
#str(data)
# Replace lines without age by median
data$Age[is.na(data$Age)] <- median(data$Age, na.rm=TRUE)
#Create a model of dependence of survival of a passenger gender, a class which he travels and age.
model = glm(Survived ~ Sex + Pclass + Age, data=data, family = binomial) #binomial means that selected 'logistic regression'
#Consider our model...
#summary(model)
t <- 0.4 #the threshold level
# Read test data
# test <- read.csv("data/test.csv")
# predictResault <- predict(model, newdata = test, type="response")
# test$Survived[predictResault >= t] = 1
# test$Survived[predictResault < t] = 0
# Using the model to predict on test data
# do not specify the parameter newdata
predictTrain <- predict(model, type="response")
# s <- table(data$Survived,predictTrain > t)
# TP <- s[2,2]
# TN <- s[1,1]
# FP <- s[1,2]
# FN <- s[2,1]
# TPR <- TP / (TP + FN) #sensitivity (~recall)
# FPR <- FP / (FP + TN)
# TNR <- TN / (TN + FP) #specificity
# FNR <- FN / (FN + TP)
# install.packages("ROCR")
# install.packages("PRROC")
#require("ROCR")
require("PRROC")
fg <- predictTrain[ data$Survived == 1 ]
bg <- predictTrain[ data$Survived == 0 ]
pr <- pr.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
roc <- roc.curve(scores.class0 = fg, scores.class1 = bg, curve = T)
par(mfrow=c(2,2))
plot(pr, xaxs = "i", yaxs = "i")
plot(roc, xaxs = "i", yaxs = "i")
source('C:/Users/Andrew/Desktop/СМПР/Мое/SMCS/general/sourses/ROC+AUC.R')
