for(i in 1:l)
{
cat(xl[i,n+1], "\n")
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
cat("fsfsdf\n")
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
cat(potentialFunc(xl,xl[i, 1:n],h,charge[i]), "\n")
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
cat("fsfsdf\n")
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
cat(potentialFunc(xl,xl[i, 1:n],h,charge[i]), "\n")
cat(xl[i,n+1], "\n")
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
cat("fsfsdf\n")
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
if(potentialFunc(xl,xl[i, 1:n],h,charge[i]))
{
cat("fsfsdf\n")
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
cat(potentialFunc(xl,xl[i, 1:n],h,charge[i]), "\n")
cat(xl[i,n+1], "\n")
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
cat("fsfsdf\n")
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h[i],ker.type[3])
}
as.character(classesList[which.max(counts)])
}
optimizedCharge(xl,20,1)
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h[i],ker.type[3])
}
as.character(classesList[which.max(counts)])
1
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
}
as.character(classesList[which.max(counts)])
}
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
}
as.character(classesList[which.max(counts)])
which.max(counts)
}
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
}
as.character(classesList[which.max(counts)])
which.max(counts)
}
optimizedCharge(xl,20,1)
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
cat(potentialFunc(xl,xl[i, 1:n],h,charge[i]),"\n")
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
}
as.character(classesList[which.max(counts)])
which.max(counts)
1
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
}
as.character(classesList[which.max(counts)])
counts
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
}
as.character(classesList[which.max(counts)])
clLength
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
if(is.na(counts[which(orderedXl[i,n+1]==classesList)])) return  (i);
}
as.character(classesList[which.max(counts)])
clLength
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[3])
if(is.na(kerne(distances[i, 2]/h,ker.type[3]))) return  (i)
}
as.character(classesList[which.max(counts)])
clLength
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[7])
# if(is.na(kerne(distances[i, 2]/h,ker.type[3]))) return  (i)
}
as.character(classesList[which.max(counts)])
clLength
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[7])
if(is.na(kerne(distances[i, 2]/h,ker.type[3]))) return  (i)
}
as.character(classesList[which.max(counts)])
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[7])
# if(is.na(kerne(distances[i, 2]/h,ker.type[3]))) return  (i)
}
as.character(classesList[which.max(counts)])
}
optimizedCharge(xl,20,1)
potentialFunc <- function(xl,u,h,charge,metricFunction = euclideanDistance)
{#РЅРµ СЂР°Р±РѕС‚Р°РµС‚ РїРѕС‡РµРјСѓ-С‚Рѕ ((
l <- dim(xl)[1]
n <- dim(xl)[2]-1
distances <- matrix(NA, l, 2)
for (i in 1:l)
{
distances[i, ] <- c(i, metricFunction(xl[i, 1:n], u))
}
orderedXl <- xl[order(distances[, 2]), ]
classesList <- unique(xl[ ,n+1])
clLength <- length(classesList)
counts <- rep(0,clLength)
for (i in 1:l)
{
counts[which(orderedXl[i,n+1]==classesList)] <-
counts[which(orderedXl[i,n+1]==classesList)] +
charge[i]*kerne(distances[i, 2]/h,ker.type[7])
}
as.character(classesList[which.max(counts)])
}
optimizedCharge <- function(xl,eps,h)
{
l <- dim(xl)[1]
n <- dim(xl)[2]-1
charge <- rep(0,l)
while(TRUE)
{
mistakes <- 0
for(i in 1:l)
{
if(potentialFunc(xl,xl[i, 1:n],h,charge[i])!=xl[i,n+1])
{
mistakes <- mistakes+1
charge[i] <- charge[i]+1
}
}
if(mistakes/l<eps) break
}
return(charge)
}
